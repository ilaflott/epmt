## this works for podman, but not for docker
#FROM localhost/slurm-cluster:21.08.6

# this works for docker but not for podman
# link to gitlab.gfdl.noaa.gov here? thank you Josh E.!
FROM docker.io/library/slurm-cluster:21.08.6

# the image on dockerhub in actually centOS7 based, despite what the
# dockerfile for the image says
#FROM giovtorres/docker-slurm-cluster:latest

RUN yum update -y
RUN yum install -y \
    tcsh \
    environment-modules
RUN yum install -y \
    unzip \
    bash \
    tcsh \
    nc \
    curl \
    make \
    git \
    gcc \
    postgresql-devel \
    zlib-devel \
    bzip2 \
    bzip2-devel \
    readline-devel \
    sqlite-devel \
    openssl-devel \
    xz \
    xz-devel \
    libffi-devel

ARG sqlite_year=2025
ARG sqlite_version
RUN cd /usr/src \
    && echo "downloading sqlite3 ${sqlite_version}" \
    && curl -o sqlite-amalgamation-${sqlite_version}.zip https://www.sqlite.org/${sqlite_year}/sqlite-amalgamation-${sqlite_version}.zip \
    && unzip sqlite-amalgamation-${sqlite_version}.zip \
    && echo "building libsqlite3 ${sqlite_version} w/ json1 and more" \
    && cd sqlite-amalgamation-${sqlite_version} \
    && gcc -shared -fPIC -O2  -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_LOAD_EXTENSION -DSQLITE_MAX_VARIABLE_NUMBER=9999 sqlite3.c -o /usr/lib64/libsqlite3.so

ARG python_version
RUN rm -rf /usr/local/bin/python* /usr/local/lib/*python*
RUN cd /usr/src \
    && echo "downloading python" \
    && curl -o Python-${python_version}.tgz https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz \
    && tar xzf Python-${python_version}.tgz \
    && cd Python-${python_version} \
    && echo "building python3" \
    && ./configure --prefix=/usr --enable-shared --enable-optimizations --enable-loadable-sqlite-extensions \
    && make --silent install > /dev/null

RUN ldconfig
RUN python3 -V
RUN pip3 install --upgrade pip

RUN yum install -y gcc-c++

COPY requirements.txt.py3 /tmp/
RUN pip3 install -r /tmp/requirements.txt.py3

COPY src/epmt/ui/requirements-ui.txt.py3 /tmp
# RUN pip3 install -r /tmp/requirements-ui.txt.py3 

RUN rm -f /tmp/requirements.txt.py3 /tmp/requirements-ui.txt.py3
RUN yum clean all
RUN rm -rf /var/cache/yum

ARG install_path
ARG epmt_version
ARG epmt_full_release
ARG epmt_python_full_release

WORKDIR ${install_path}_archive
COPY ${epmt_full_release} .
COPY src/dist/${epmt_python_full_release} .
RUN python3 -m pip install ${epmt_python_full_release}

RUN mkdir /usr/lib/python3.9/site-packages/papiex-oss \
    && tar zxf ${epmt_python_full_release}  \
    && mv epmt-${epmt_version}/papiex-epmt-install /usr/lib/python3.9/site-packages/papiex-oss 
#    && rm -rf *.tgz 
COPY utils/epmt-installer .

WORKDIR ${install_path}
RUN ls ${install_path}

RUN echo -ne "\n\n" | ${install_path}_archive/epmt-installer ${install_path}_archive/EPMT*tgz
RUN rm -f *.tgz epmt-installer

#ENV PATH="${install_path}/epmt-${epmt_version}/epmt-install/epmt:${PATH}:/usr/local/bin:/usr/local/libexec"
ENV PATH="/usr/bin:${PATH}:/usr/local/bin:/usr/local/libexec"


# unsure if the all-caps env var is needed? 
ARG install_prefix
ENV EPMT_INSTALL_PREFIX=${install_prefix}

# put bats in the container- needed for integration tests
RUN ${install_prefix}/epmt/test/integration/libs/bats/install.sh /usr/local
