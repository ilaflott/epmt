#!/usr/bin/env python

if (__name__ == "__main__"):
    # Handle crappy python 2.6 installations
    try:
        import argparse
        from sys import argv, stdout
    except ImportError:
        from sys import stdout, stderr, argv
        print >> stderr,"WARNING: system argparse not found, using our own."
        print >> stderr,"WARNING: This python/OS is likely vulnerable to exploits!"
        import argparse26 as argparse
    
    def debug_namespace(args):
        if False:
            print (args)
        pass
    from epmt_cmds import dump_config
    parser = argparse.ArgumentParser(prog='epmt', add_help=True, description="This is a tool to collect metadata and performance data about an entire job down to the individual threads in individual processes."\
        +"PerfMiner \n This is a tool to collect metadata and performance data about an entire job down to the individual threads in individual processes. This tool uses papiex to perform the "\
        +"process monitoring. This tool is targeted at batch or ephemeral jobs, not daemon processes.")
    subparser = parser.add_subparsers(title="commands", dest="command")

    # help, start, source, run, stop, dump, stage, submit, check
    
    source_parser = subparser.add_parser('source', help="Environment variables for performance monitoring")
    source_parser.add_argument('-j', '--jobid',help="Force job ID instead of getting it from the environment")
    source_parser.set_defaults(func=debug_namespace, epmt_cmd='source')

    start_parser = subparser.add_parser('start', help="Begin EPMT logging")
    start_parser.add_argument('-j', '--jobid',help="Force job ID instead of getting it from the environment")
    start_parser.add_argument('epmt_cmd_args', nargs='*', help="List of directories from batch")
    start_parser.set_defaults(func=debug_namespace, epmt_cmd='start')

    stage_parser = subparser.add_parser('stage', help="Generate job archive")
    stage_parser.add_argument('-j', '--jobid',help="Force job ID instead of getting it from the environment")
    stage_parser.add_argument('epmt_cmd_args', nargs='*', help="List of directories from batch")
    stage_parser.set_defaults(func=debug_namespace, epmt_cmd='stage', jobid=None)

    dump_parser = subparser.add_parser('dump', help="Print metadata from archive")
    dump_parser.add_argument('-j', '--jobid',help="Force job ID instead of getting it from the environment")
    dump_parser.add_argument('epmt_cmd_args', default=[], nargs='*', help="Archive or list of archives to dump")
    dump_parser.set_defaults(func=debug_namespace, epmt_cmd='dump', jobid=None)

    run_parser = subparser.add_parser('run')
    run_parser.add_argument('-j', '--jobid',help="Force job ID instead of getting it from the environment")
    run_parser.add_argument('-a', '--auto',action='store_true',help="Do start/stop when running")
    run_parser.add_argument('-n', '--dry-run', action='store_true',help="Don't touch the database")
    run_parser.add_argument('epmt_cmd_args', default=[], nargs='*', help="")
    run_parser.set_defaults(func=debug_namespace, epmt_cmd='run', dry_run=False, wrapit=False)
    
    stop_parser = subparser.add_parser('stop', help="Stop EPMT logging")
    stop_parser.add_argument('-j', '--jobid',help="Force job ID instead of getting it from the environment")
    stop_parser.set_defaults(func=debug_namespace, epmt_cmd='stop', epmt_cmd_args=None)

    submit_parser = subparser.add_parser('submit', help="Commit completed job to database")
    submit_parser.add_argument('epmt_cmd_args', nargs='*', help="List of directories")
    submit_parser.add_argument('-j', '--jobid', help="Force job ID instead of getting it from the environment")
    submit_parser.add_argument('-u', '--user', help="Force user instead of getting it from the environment")
    submit_parser.add_argument('-e', '--error', action='store_true',help="Exit at the first sign of trouble")
    submit_parser.add_argument('-n', '--dry-run', action='store_true',help="Don't touch the database")
    submit_parser.add_argument('--drop',action='store_true',help="Drop all tables/data and recreate before importing")
    submit_parser.set_defaults(func=debug_namespace, epmt_cmd='submit')

    dbsize_parser = subparser.add_parser('dbsize', help="Find detailed size of database")
    dbsize_parser.add_argument('size_of', default=[], nargs='*', help="database, table, index, tablespace")
    dbsize_parser.add_argument('--bytes',action='store_true',help="Returns dbsize in bytes")
    dbsize_parser.add_argument('--json',action='store_true',help="Output JSON results of dbsizes")
    dbsize_parser.set_defaults(func=debug_namespace, epmt_cmd='submit')

    check_parser = subparser.add_parser('check', help='Verify EPMT Installation')
    check_parser.add_argument('-j', '--jobid', help="Force job ID instead of getting it from the environment")
    check_parser.set_defaults(epmt_cmd='check')

    delete_parser = subparser.add_parser('delete', help='Delete jobs from the database')
    delete_parser.add_argument('epmt_cmd_args', nargs='*', help="List of jobs to delete")
    delete_parser.set_defaults(epmt_cmd='delete')
    
    list_parser = subparser.add_parser('list', help='Display all jobs in the database')
    list_parser.add_argument('epmt_cmd_args', nargs='*', help="A list of jobs to search for")
    list_parser.set_defaults(epmt_cmd='list')
    
    parser.add_argument('-v', '--verbose',action='count',help="Increase level of verbosity/debug")
    #	parser.add_argument('-c', '--csh',action='store_true',help="C-shell mode")
    #	parser.add_argument('-b', '--bash',action='store_true',help="Bash mode")
    parser.set_defaults(func=debug_namespace,epmt_cmd='help')
    if len(argv) < 2:
        parser.print_help()
        dump_config(stdout)
        exit(0)
    args = parser.parse_args()
    from epmt_cmds import epmt_entrypoint
    args.func(args)
    if hasattr(args,'epmt_cmd'):
        exit(epmt_entrypoint(args))
else:
    print >> stderr,"ERROR: This module cannot be imported."
    exit(1)