#!/bin/bash -eE

# This script is only there to run the tests manually before committing.
# usage:
#   tests/run
# 
# You need to fire the above command from the top-level EPMT directory
# The test uses python in PATH, so make sure you already have the
# right virtualenv loaded. Also, it assumes you have docker available.
#
# 

SETTINGS_BACKUP="settings.py.`whoami`.$$"
pg_service_started=0

function finish {
  # Your cleanup code here
  if [ $pg_service_started -eq 1 ]; then
      echo "stopping postgres docker service.."
      docker stop pg-docker
  fi
  if [ -f $SETTINGS_BACKUP ]; then
    echo "Restoring settings.py (from $SETTINGS_BACKUP)"
    mv -vf $SETTINGS_BACKUP settings.py
  else
    rm -f settings.py settings.pyc
  fi
}

rm -f settings.pyc # remove stale stuff
trap finish EXIT INT QUIT HUP

if [ -f settings.py ]; then
    echo "Found an existing settings.py. Saving it to $SETTINGS_BACKUP"
    mv -v settings.py $SETTINGS_BACKUP
fi


if [ "$POSTGRES_HOST" == "" ]; then
    echo "No postgres service found -- starting postgres docker container.."
    docker run --rm  --name pg-docker -e POSTGRES_DB=EPMT -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=example -d -p 5432:5432  postgres:9.5
    pg_service_started=1
    pg_settings_file="settings_pg_localhost_sqlachemy.py"
else
    echo "Postges service running on $POSTGRES_HOST"
    pg_settings_file="settings_pg_container_sqlalchemy.py"
fi

for settings_file in settings/{settings_sqlite_inmem_pony.py,settings_sqlite_inmem_sqlalchemy.py,$pg_settings_file}; do
    echo "------------------------"
    echo "using settings_file"
    cp -v $settings_file settings.py
    chmod 0644 settings.py
    make check
done
