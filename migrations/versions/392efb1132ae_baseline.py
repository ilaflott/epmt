"""baseline

Revision ID: 392efb1132ae
Revises: 
Create Date: 2020-03-05 11:18:58.979034

"""
from alembic import op
import sqlalchemy as sa

# append the directory two-levels above this file
# to the module search path (so we can find the orm module)
import sys
from os.path import dirname
sys.path.append(dirname(__file__) + "/../..")
from orm import orm_db_provider
if orm_db_provider() == 'postgres':
    from sqlalchemy.dialects.postgresql import JSONB as JSON
    json_args = { 'astext_type': sa.Text() }
else:
    from sqlalchemy import JSON
    json_args = {}

# revision identifiers, used by Alembic.
revision = '392efb1132ae'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('hosts',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('info_dict', JSON(**json_args), nullable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('refmodels',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tags', JSON(**json_args), nullable=True),
    sa.Column('op_tags', JSON(**json_args), nullable=True),
    sa.Column('computed', JSON(**json_args), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('info_dict', JSON(**json_args), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('refmodels', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_refmodels_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_refmodels_op_tags'), ['op_tags'], unique=False)
        batch_op.create_index(batch_op.f('ix_refmodels_tags'), ['tags'], unique=False)

    op.create_table('users',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=True),
    sa.Column('info_dict', JSON(**json_args), nullable=True),
    sa.PrimaryKeyConstraint('name'),
    sa.UniqueConstraint('id')
    )
    op.create_table('jobs',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('info_dict', JSON(**json_args), nullable=True),
    sa.Column('annotations', JSON(**json_args), nullable=True),
    sa.Column('analyses', JSON(**json_args), nullable=True),
    sa.Column('start', sa.DateTime(), nullable=True),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('proc_sums', JSON(**json_args), nullable=True),
    sa.Column('env_dict', JSON(**json_args), nullable=True),
    sa.Column('env_changes_dict', JSON(**json_args), nullable=True),
    sa.Column('submit', sa.DateTime(), nullable=True),
    sa.Column('jobid', sa.String(), nullable=False),
    sa.Column('jobname', sa.String(), nullable=True),
    sa.Column('exitcode', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('tags', JSON(**json_args), nullable=True),
    sa.Column('cpu_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.name'], ),
    sa.PrimaryKeyConstraint('jobid')
    )
    with op.batch_alter_table('jobs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_jobs_analyses'), ['analyses'], unique=False)
        batch_op.create_index(batch_op.f('ix_jobs_annotations'), ['annotations'], unique=False)
        batch_op.create_index(batch_op.f('ix_jobs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_jobs_jobid'), ['jobid'], unique=False)
        batch_op.create_index(batch_op.f('ix_jobs_start'), ['start'], unique=False)
        batch_op.create_index(batch_op.f('ix_jobs_tags'), ['tags'], unique=False)

    op.create_table('host_job_associations',
    sa.Column('jobid', sa.String(), nullable=False),
    sa.Column('hostname', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['hostname'], ['hosts.name'], ),
    sa.ForeignKeyConstraint(['jobid'], ['jobs.jobid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('jobid', 'hostname')
    )
    op.create_table('processes',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('info_dict', JSON(**json_args), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('jobid', sa.String(), nullable=True),
    sa.Column('start', sa.DateTime(), nullable=True),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('tags', JSON(**json_args), nullable=True),
    sa.Column('host_id', sa.String(), nullable=True),
    sa.Column('threads_df', JSON(**json_args), nullable=True),
    sa.Column('threads_sums', JSON(**json_args), nullable=True),
    sa.Column('numtids', sa.Integer(), nullable=True),
    sa.Column('cpu_time', sa.Float(), nullable=True),
    sa.Column('inclusive_cpu_time', sa.Float(), nullable=True),
    sa.Column('exename', sa.String(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('args', sa.String(), nullable=True),
    sa.Column('pid', sa.Integer(), nullable=True),
    sa.Column('ppid', sa.Integer(), nullable=True),
    sa.Column('pgid', sa.Integer(), nullable=True),
    sa.Column('sid', sa.Integer(), nullable=True),
    sa.Column('gen', sa.Integer(), nullable=True),
    sa.Column('exitcode', sa.Integer(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('depth', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['hosts.name'], ),
    sa.ForeignKeyConstraint(['jobid'], ['jobs.jobid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['processes.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.name'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('processes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_processes_jobid'), ['jobid'], unique=False)
        batch_op.create_index(batch_op.f('ix_processes_parent_id'), ['parent_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_processes_start'), ['start'], unique=False)
        batch_op.create_index(batch_op.f('ix_processes_tags'), ['tags'], unique=False)

    op.create_table('refmodel_job_associations',
    sa.Column('jobid', sa.String(), nullable=False),
    sa.Column('refmodel_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['jobid'], ['jobs.jobid'], ),
    sa.ForeignKeyConstraint(['refmodel_id'], ['refmodels.id'], ),
    sa.PrimaryKeyConstraint('jobid', 'refmodel_id')
    )
    op.create_table('unprocessed_jobs',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('info_dict', JSON(**json_args), nullable=True),
    sa.Column('jobid', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['jobid'], ['jobs.jobid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('jobid')
    )
    op.create_table('ancestor_descendant_associations',
    sa.Column('ancestor', sa.Integer(), nullable=False),
    sa.Column('descendant', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ancestor'], ['processes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['descendant'], ['processes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ancestor', 'descendant')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ancestor_descendant_associations')
    op.drop_table('unprocessed_jobs')
    op.drop_table('refmodel_job_associations')
    with op.batch_alter_table('processes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_processes_tags'))
        batch_op.drop_index(batch_op.f('ix_processes_start'))
        batch_op.drop_index(batch_op.f('ix_processes_parent_id'))
        batch_op.drop_index(batch_op.f('ix_processes_jobid'))

    op.drop_table('processes')
    op.drop_table('host_job_associations')
    with op.batch_alter_table('jobs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_jobs_tags'))
        batch_op.drop_index(batch_op.f('ix_jobs_start'))
        batch_op.drop_index(batch_op.f('ix_jobs_jobid'))
        batch_op.drop_index(batch_op.f('ix_jobs_created_at'))
        batch_op.drop_index(batch_op.f('ix_jobs_annotations'))
        batch_op.drop_index(batch_op.f('ix_jobs_analyses'))

    op.drop_table('jobs')
    op.drop_table('users')
    with op.batch_alter_table('refmodels', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_refmodels_tags'))
        batch_op.drop_index(batch_op.f('ix_refmodels_op_tags'))
        batch_op.drop_index(batch_op.f('ix_refmodels_name'))

    op.drop_table('refmodels')
    op.drop_table('hosts')
    # ### end Alembic commands ###
