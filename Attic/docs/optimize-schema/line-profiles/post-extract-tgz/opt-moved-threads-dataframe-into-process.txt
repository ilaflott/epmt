Timer unit: 1e-06 s

Total time: 14.7919 s
File: ./epmt_job.py
Function: ETL_job_dict at line 251

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   251                                           @db_session
   252                                           @profile
   253                                           def ETL_job_dict(metadata, filedict, settings, tarfile=None):
   254                                           # Only fields used for now
   255         1         12.0     12.0      0.0      jobid = metadata['job_pl_id']
   256         1          6.0      6.0      0.0      username = metadata['job_pl_username']
   257                                           #
   258         1        755.0    755.0      0.0      logger.info("Processing job id %s",jobid)
   259         1          6.0      6.0      0.0      hostname = ""
   260         1          4.0      4.0      0.0      file = ""
   261                                           # Damn NAN's for empty strings require converters, and empty integers need floats
   262         1          6.0      6.0      0.0      conv_dic = { 'exename':str, 
   263         1          5.0      5.0      0.0                   'path':str, 
   264         1          5.0      5.0      0.0                   'args':str } 
   265         1          5.0      5.0      0.0      dtype_dic = { 
   266         1          6.0      6.0      0.0          'pid':                        float,
   267         1          5.0      5.0      0.0          'generation':                 float,
   268         1          6.0      6.0      0.0          'ppid':                       float,
   269         1          5.0      5.0      0.0          'pgid':                       float,
   270         1          5.0      5.0      0.0          'sid':                        float,
   271         1          7.0      7.0      0.0          'numtids':                    float }
   272                                           
   273         1          7.0      7.0      0.0      standards = [ "exename","path","args","pid","generation","ppid","pgid","sid","numtids","tid","start","end" ]
   274                                           
   275         1         59.0     59.0      0.0      then = datetime.datetime.now()
   276         1         13.0     13.0      0.0      csvt = datetime.timedelta()
   277         1         20.0     20.0      0.0      earliest_process = datetime.datetime.utcnow()
   278         1         48.0     48.0      0.0      latest_process = datetime.datetime.fromtimestamp(0)
   279                                           #    stdout.write('-')
   280                                           # Hostname, job, metricname objects
   281                                           # Iterate over hosts
   282         1         31.0     31.0      0.0      logger.debug("Iterating over %d hosts for job ID %s, user %s...",len(filedict.keys()),jobid,username)
   283         1      10742.0  10742.0      0.1      u = lookup_or_create_user(username)
   284         1       6968.0   6968.0      0.0      j = create_job(jobid,u,metadata)
   285         1          3.0      3.0      0.0      if not j:
   286                                           # We might have leaked a username to the database here
   287                                           # FIX!        
   288                                                   return None
   289                                           
   290         1          3.0      3.0      0.0      didsomething = False
   291         1          3.0      3.0      0.0      oldcomment = None
   292         1          3.0      3.0      0.0      mns = []
   293         1          2.0      2.0      0.0      tags = []
   294         1          2.0      2.0      0.0      all_tags = []
   295         1          2.0      2.0      0.0      all_procs = []
   296                                           
   297         1          3.0      3.0      0.0      for hostname, files in filedict.iteritems():
   298         1         12.0     12.0      0.0          logger.debug("Processing host %s",hostname)
   299         1       5690.0   5690.0      0.0          h = lookup_or_create_host(hostname)
   300         1          4.0      4.0      0.0          cntmax = len(files)
   301         1          3.0      3.0      0.0          cnt = 0
   302      1000       2010.0      2.0      0.0          for f in files:
   303      1000       9511.0      9.5      0.1              logger.debug("Processing file %s",f)
   304                                           #
   305                                           #            stdout.write('\b')            # erase the last written char
   306                                           #            stdout.write(spinner.next())  # write the next character
   307                                           #            stdout.flush()                # flush stdout buffer (actual character display)
   308                                           #
   309      1000       7233.0      7.2      0.0              csv = datetime.datetime.now()
   310      1000      45684.0     45.7      0.3              rows,comment = extract_tags_from_comment_line(f,tarfile=tarfile)
   311                                           # Check comment/tags cache
   312      1000       2182.0      2.2      0.0              if comment and comment != oldcomment:
   313         1        205.0    205.0      0.0                  logger.info("Missed tag cache %s",comment)
   314         1       2981.0   2981.0      0.0                  tags = lookup_or_create_tags([comment])
   315         1          3.0      3.0      0.0                  oldcomment = comment
   316                                           # Merge all tags into one list for job
   317         1          6.0      6.0      0.0                  all_tags = list(set().union(all_tags,tags))
   318                                           
   319      1000       1462.0      1.5      0.0              if tarfile:
   320                                                           info = tarfile.getmember(f)
   321                                                           flo = tarfile.extractfile(info)
   322                                                       else:
   323      1000       1478.0      1.5      0.0                  flo = f
   324                                                           
   325      1000     465417.0    465.4      3.1              from pandas import read_csv
   326      1000       1622.0      1.6      0.0              pf = read_csv(flo,
   327      1000       1438.0      1.4      0.0                            sep=",",
   328                                           #                          dtype=dtype_dic, 
   329      1000       1486.0      1.5      0.0                            converters=conv_dic,
   330      1000   11313784.0  11313.8     76.5                            skiprows=rows, escapechar='\\')
   331      1000      19762.0     19.8      0.1              if pf.empty:
   332                                                           logger.error("Something wrong with file %s, readcsv returned empty, skipping...",f)
   333                                                           continue
   334                                           
   335                                           # Lookup or create the necessary objects, only happens once!
   336      1000       1827.0      1.8      0.0              if not mns:
   337                                                           # for metric in pf.columns[settings.metrics_offset:].values.tolist():
   338                                                           #     mns[metric] = lookup_or_create_metricname(metric)
   339         1        147.0    147.0      0.0                  mns = pf.columns[settings.metrics_offset:].values.tolist()
   340                                           # Make Process/Thread/Metrics objects in DB
   341      1000    2846296.0   2846.3     19.2              p = load_process_from_pandas(pf, h, j, u, tags, mns)
   342      1000       2203.0      2.2      0.0              if not p:
   343                                                           logger.error("Failed loading from pandas, file %s!",f);
   344                                                           continue
   345      1000       1937.0      1.9      0.0              all_procs.append(p)
   346                                           # Compute duration of job
   347      1000       8827.0      8.8      0.1              if (p.start < earliest_process):
   348         6         33.0      5.5      0.0                  earliest_process = p.start
   349      1000       5845.0      5.8      0.0              if (p.end > latest_process):
   350        11         56.0      5.1      0.0                  latest_process = p.end
   351                                           # Debugging/progress
   352      1000       1700.0      1.7      0.0              cnt += 1
   353      1000      20067.0     20.1      0.1              csvt += datetime.datetime.now() - csv
   354      1000       2090.0      2.1      0.0              if cnt % 1000 == 0:
   355         1        161.0    161.0      0.0                      logger.info("Did %d of %d...%.2f/sec",cnt,cntmax,cnt/csvt.total_seconds())
   356         1          4.0      4.0      0.0                      exit(0)
   357                                           #
   358                                                   if cnt:
   359                                                       didsomething = True
   360                                           
   361                                           #    stdout.write('\b')            # erase the last written char
   362                                           
   363                                               if filedict:
   364                                                   if not didsomething:
   365                                                       logger.warning("Something went wrong in parsing CSV files")
   366                                                       return False
   367                                               else:
   368                                                   logger.warning("Submitting job with no CSV data")
   369                                           
   370                                           # Add sum of tags to job        
   371                                               if all_tags:
   372                                                   logger.info("Adding %d tags to job",len(all_tags))
   373                                                   j.tags.add(all_tags)
   374                                           # Add all processes to job
   375                                               if all_procs:
   376                                                   logger.info("Adding %d processes to job",len(all_procs))
   377                                                   j.processes.add(all_procs)
   378                                           # Update start/end/duration of job
   379                                           #       j.start = earliest_process
   380                                           #        j.end = latest_process
   381                                           #
   382                                           #
   383                                           #
   384                                               j.start = metadata["job_pl_start"]
   385                                               j.end = metadata["job_el_stop"]
   386                                               d = j.end - j.start
   387                                               j.duration = int(d.total_seconds()*1000000)
   388                                               
   389                                           #
   390                                           #
   391                                           #
   392                                               logger.info("Earliest process start: %s",j.start)
   393                                               logger.info("Latest process end: %s",j.end)
   394                                               logger.info("Computed duration of job: %f us, %.2f m",j.duration,j.duration/60000000)
   395                                               now = datetime.datetime.now() 
   396                                               logger.info("Staged import of %d processes", len(j.processes))
   397                                               logger.info("Staged import took %s, %f processes per second",
   398                                                           now - then,len(j.processes)/float((now-then).total_seconds()))
   399                                                           
   400                                               return j

