Timer unit: 1e-06 s

Total time: 21.7416 s
File: ./epmt_job.py
Function: ETL_job_dict at line 220

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   220                                           @db_session
   221                                           @profile
   222                                           def ETL_job_dict(metadata, filedict, settings, tarfile=None):
   223                                           # Only fields used for now
   224         1          7.0      7.0      0.0      jobid = metadata['job_pl_id']
   225         1          4.0      4.0      0.0      username = metadata['job_pl_username']
   226                                           #
   227         1        554.0    554.0      0.0      logger.info("Processing job id %s",jobid)
   228         1          3.0      3.0      0.0      hostname = ""
   229         1          4.0      4.0      0.0      file = ""
   230                                           # Damn NAN's for empty strings require converters, and empty integers need floats
   231         1          4.0      4.0      0.0      conv_dic = { 'exename':str, 
   232         1          3.0      3.0      0.0                   'path':str, 
   233         1          3.0      3.0      0.0                   'args':str } 
   234         1          3.0      3.0      0.0      dtype_dic = { 
   235         1          3.0      3.0      0.0          'pid':                        float,
   236         1          3.0      3.0      0.0          'generation':                 float,
   237         1          3.0      3.0      0.0          'ppid':                       float,
   238         1          3.0      3.0      0.0          'pgid':                       float,
   239         1          4.0      4.0      0.0          'sid':                        float,
   240         1          4.0      4.0      0.0          'numtids':                    float }
   241                                           
   242         1          4.0      4.0      0.0      standards = [ "exename","path","args","pid","generation","ppid","pgid","sid","numtids","tid","start","end" ]
   243                                           
   244         1         43.0     43.0      0.0      then = datetime.datetime.now()
   245         1          9.0      9.0      0.0      csvt = datetime.timedelta()
   246         1         14.0     14.0      0.0      earliest_process = datetime.datetime.utcnow()
   247         1         30.0     30.0      0.0      latest_process = datetime.datetime.fromtimestamp(0)
   248                                           #    stdout.write('-')
   249                                           # Hostname, job, metricname objects
   250                                           # Iterate over hosts
   251         1         21.0     21.0      0.0      logger.debug("Iterating over %d hosts for job ID %s, user %s...",len(filedict.keys()),jobid,username)
   252         1       9566.0   9566.0      0.0      u = lookup_or_create_user(username)
   253         1       3786.0   3786.0      0.0      j = create_job(jobid,u,metadata)
   254         1          3.0      3.0      0.0      if not j:
   255                                           # We might have leaked a username to the database here
   256                                           # FIX!        
   257                                                   return None
   258                                           
   259         1          2.0      2.0      0.0      didsomething = False
   260         1          1.0      1.0      0.0      oldcomment = None
   261         1          1.0      1.0      0.0      mns = {}
   262         1          2.0      2.0      0.0      tags = []
   263         1          2.0      2.0      0.0      all_tags = []
   264         1          2.0      2.0      0.0      all_procs = []
   265                                           
   266         1          2.0      2.0      0.0      for hostname, files in filedict.iteritems():
   267         1          8.0      8.0      0.0          logger.debug("Processing host %s",hostname)
   268         1       3815.0   3815.0      0.0          h = lookup_or_create_host(hostname)
   269         1          3.0      3.0      0.0          cntmax = len(files)
   270         1          2.0      2.0      0.0          cnt = 0
   271      1000       1884.0      1.9      0.0          for f in files:
   272      1000       9451.0      9.5      0.0              logger.debug("Processing file %s",f)
   273                                           #
   274                                           #            stdout.write('\b')            # erase the last written char
   275                                           #            stdout.write(spinner.next())  # write the next character
   276                                           #            stdout.flush()                # flush stdout buffer (actual character display)
   277                                           #
   278      1000       7519.0      7.5      0.0              csv = datetime.datetime.now()
   279      1000      49362.0     49.4      0.2              rows,comment = extract_tags_from_comment_line(f,tarfile=tarfile)
   280                                           # Check comment/tags cache
   281      1000       2244.0      2.2      0.0              if comment and comment != oldcomment:
   282         1        142.0    142.0      0.0                  logger.info("Missed tag cache %s",comment)
   283         1       2645.0   2645.0      0.0                  tags = lookup_or_create_tags([comment])
   284         1          2.0      2.0      0.0                  oldcomment = comment
   285                                           # Merge all tags into one list for job
   286         1          5.0      5.0      0.0                  all_tags = list(set().union(all_tags,tags))
   287                                           
   288      1000       1446.0      1.4      0.0              if tarfile:
   289                                                           info = tarfile.getmember(f)
   290                                                           flo = tarfile.extractfile(info)
   291                                                       else:
   292      1000       1409.0      1.4      0.0                  flo = f
   293                                                           
   294      1000     458180.0    458.2      2.1              from pandas import read_csv
   295      1000       1546.0      1.5      0.0              pf = read_csv(flo,
   296      1000       1375.0      1.4      0.0                            sep=",",
   297                                           #                          dtype=dtype_dic, 
   298      1000       1415.0      1.4      0.0                            converters=conv_dic,
   299      1000   11475227.0  11475.2     52.8                            skiprows=rows, escapechar='\\')
   300      1000      19984.0     20.0      0.1              if pf.empty:
   301                                                           logger.error("Something wrong with file %s, readcsv returned empty, skipping...",f)
   302                                                           continue
   303                                           
   304                                           # Lookup or create the necessary objects, only happens once!
   305      1000       1906.0      1.9      0.0              if not mns:
   306        27        232.0      8.6      0.0                  for metric in pf.columns[settings.metrics_offset:].values.tolist():
   307        26      34912.0   1342.8      0.2                      mns[metric] = lookup_or_create_metricname(metric)
   308                                           # Make Process/Thread/Metrics objects in DB
   309      1000    9610688.0   9610.7     44.2              p = load_process_from_pandas(pf, h, j, u, tags, mns)
   310      1000       2434.0      2.4      0.0              if not p:
   311                                                           logger.error("Failed loading from pandas, file %s!",f);
   312                                                           continue
   313      1000       2014.0      2.0      0.0              all_procs.append(p)
   314                                           # Compute duration of job
   315      1000       9168.0      9.2      0.0              if (p.start < earliest_process):
   316         6         35.0      5.8      0.0                  earliest_process = p.start
   317      1000       5926.0      5.9      0.0              if (p.end > latest_process):
   318        11         54.0      4.9      0.0                  latest_process = p.end
   319                                           # Debugging/progress
   320      1000       1635.0      1.6      0.0              cnt += 1
   321      1000      18543.0     18.5      0.1              csvt += datetime.datetime.now() - csv
   322      1000       2140.0      2.1      0.0              if cnt % 1000 == 0:
   323         1        166.0    166.0      0.0                      logger.info("Did %d of %d...%.2f/sec",cnt,cntmax,cnt/csvt.total_seconds())
   324         1          3.0      3.0      0.0                      exit(0)
   325                                           #
   326                                                   if cnt:
   327                                                       didsomething = True
   328                                           
   329                                           #    stdout.write('\b')            # erase the last written char
   330                                           
   331                                               if filedict:
   332                                                   if not didsomething:
   333                                                       logger.warning("Something went wrong in parsing CSV files")
   334                                                       return False
   335                                               else:
   336                                                   logger.warning("Submitting job with no CSV data")
   337                                           
   338                                           # Add sum of tags to job        
   339                                               if all_tags:
   340                                                   logger.info("Adding %d tags to job",len(all_tags))
   341                                                   j.tags.add(all_tags)
   342                                           # Add all processes to job
   343                                               if all_procs:
   344                                                   logger.info("Adding %d processes to job",len(all_procs))
   345                                                   j.processes.add(all_procs)
   346                                           # Update start/end/duration of job
   347                                           #       j.start = earliest_process
   348                                           #        j.end = latest_process
   349                                           #
   350                                           #
   351                                           #
   352                                               j.start = metadata["job_pl_start"]
   353                                               j.end = metadata["job_el_stop"]
   354                                               d = j.end - j.start
   355                                               j.duration = int(d.total_seconds()*1000000)
   356                                               
   357                                           #
   358                                           #
   359                                           #
   360                                               logger.info("Earliest process start: %s",j.start)
   361                                               logger.info("Latest process end: %s",j.end)
   362                                               logger.info("Computed duration of job: %f us, %.2f m",j.duration,j.duration/60000000)
   363                                               now = datetime.datetime.now() 
   364                                               logger.info("Staged import of %d processes, %d threads", 
   365                                                           len(j.processes),len(j.processes.threads))
   366                                               logger.info("Staged import took %s, %f processes per second",
   367                                                           now - then,len(j.processes)/float((now-then).total_seconds()))
   368                                                           
   369                                               return j

