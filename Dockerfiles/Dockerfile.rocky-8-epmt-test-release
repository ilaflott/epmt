FROM giovtorres/slurm-docker-cluster:latest

# RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
# RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

RUN yum update -y
RUN yum install -y tcsh environment-modules
RUN yum install -y unzip bash tcsh nc curl make git gcc postgresql-devel zlib-devel bzip2 bzip2-devel \
    readline-devel sqlite-devel openssl-devel xz xz-devel libffi-devel

ARG SQLITE_VERSION=3430100
RUN cd /usr/src && echo "downloading sqlite3 ${SQLITE_VERSION}" && \
    curl -o sqlite-amalgamation-${SQLITE_VERSION}.zip https://www.sqlite.org/2023/sqlite-amalgamation-${SQLITE_VERSION}.zip && \
    unzip sqlite-amalgamation-${SQLITE_VERSION}.zip && echo "building libsqlite3 ${SQLITE_VERSION} w/ json1 and more" && \
    cd sqlite-amalgamation-${SQLITE_VERSION} && \
    gcc -shared -fPIC -O2  -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_LOAD_EXTENSION -DSQLITE_MAX_VARIABLE_NUMBER=9999 sqlite3.c -o /usr/lib64/libsqlite3.so

ARG python_version=3.9.16
RUN rm -rf /usr/local/bin/python* /usr/local/lib/*python*
RUN cd /usr/src && echo "downloading python" && \
    curl -o Python-${python_version}.tgz https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz && \
    tar xzf Python-${python_version}.tgz && \
    cd Python-${python_version} && echo "building python3" && \
    ./configure --prefix=/usr --enable-shared --enable-optimizations --enable-loadable-sqlite-extensions && \
    make --silent install > /dev/null

RUN ldconfig
RUN python3 -V
RUN pip3 install --upgrade pip

RUN yum install -y gcc-c++

COPY requirements.txt.py3 /tmp/
RUN pip3 install -r /tmp/requirements.txt.py3

COPY src/epmt/ui/requirements-ui.txt.py3 /tmp
# RUN pip3 install -r /tmp/requirements-ui.txt.py3 

RUN rm -f /tmp/requirements.txt.py3 /tmp/requirements-ui.txt.py3
RUN yum clean all
RUN rm -rf /var/cache/yum

ARG install_path
ARG epmt_version
ARG epmt_full_release
ARG epmt_python_full_release

WORKDIR ${install_path}_archive
COPY ${epmt_full_release} .
COPY src/dist/${epmt_python_full_release} .
RUN python3 -m pip install ${epmt_python_full_release}

RUN mkdir /usr/lib/python3.9/site-packages/papiex-oss \
    && tar zxf ${epmt_python_full_release}  \
    && mv epmt-${epmt_version}/papiex-epmt-install /usr/lib/python3.9/site-packages/papiex-oss 
#    && rm -rf *.tgz
 
COPY utils/epmt-installer .
WORKDIR ${install_path}
RUN ls ${install_path}
RUN echo -ne "\n\n" | ${install_path}_archive/epmt-installer ${install_path}_archive/EPMT*tgz
ENV PATH="${install_path}/epmt-${epmt_version}/epmt-install/epmt:${PATH}:/usr/local/bin:/usr/local/libexec"
RUN rm -f *.tgz epmt-installer





#
# ian attempting smth here
#
##won't work, read-only file system, even sudo won't do it
#RUN sudo -n echo 2 > /proc/sys/kernel/perf_event_paranoid

ARG install_prefix
ENV EPMT_INSTALL_PREFIX=${install_prefix}
RUN cp -fv ${install_prefix}/preset_settings/settings_test_pg_container.py ${install_prefix}/epmt/settings.py

RUN ${install_prefix}/epmt/test/integration/libs/bats/install.sh /usr/local

# get rid of this? prefer to do this with docker run explicitly in makefile. 
#CMD ["/bin/bash", "-c", "sysctl kernel.perf_event_paranoid=1; epmt check; epmt unittest; epmt integration"]