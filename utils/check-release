#!/bin/bash 

set -uo pipefail 

# This script thoroughly tests an EPMT release
# usage:
#

function usage() {
    echo "usage: $0 [/path/to/epmt/install] (or epmt must be in your PATH)"; exit 1;
}

if [ $# -gt 0 ]; then
   case $1 in
       --help|help|-h|--h) usage;;
   esac
fi
if [ $# -eq 0 ]; then
    epmt=$(command -v epmt)
elif [ $# -eq 1 ]; then
    epmt=$(command -v ${1}/epmt)
else
    usage;
fi

if [ ! -n "${epmt}" ]; then
    usage;
fi

install_path=$(dirname ${epmt})
if [ ! -d ${install_path} ]; then
    usage;
fi

paranoid=`sysctl -n kernel.perf_event_paranoid`
if [ $paranoid -gt 2 ]; then
    sysctl -w kernel.perf_event_paranoid=2
# Linux setup, doesn't matter if it fails
#mount -o remount,rw /proc 2>/dev/null 
    if [ $? -ne 0 ]; then
	echo "Failed to set kernel.perf_event_paranoid, expect tests to fail"
    fi
fi

#
# Begin EPMT testing
#

echo; echo -n "Testing "
epmt -V
retval=$?

function cleanup() {
    rm -rf /tmp/epmt
    exit $retval
}

trap cleanup INT QUIT TERM

echo;echo "epmt check..."
epmt check
(( retval += $? ))

echo;echo "epmt unittest..."
epmt unittest
(( retval += $? ))

echo;echo "epmt integration..."
epmt integration
(( retval += $? ))

exit $retval
